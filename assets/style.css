:root {
  --textcolor: #311847;
  --headercolor: #67448b;
  --accentcolor: #ff0072;
  --backgroundcolor: #dbb8d0;
  --outline-color: #471e3e;
}

* {
  margin: 0;
  padding: 0;
  font-family: "Segoe UI", Tahoma, Geneva, Verh1dana, sans-serif;
  box-sizing: border-box;
  font-weight: 600;
}

html {
  scroll-padding-top: 130px; /* height of sticky header */
}

body {
  background-color: var(--backgroundcolor);
  background: url("./images/background.png");
  color: var(--textcolor);
  width: 100%;
}

a {
  display: flex;
  color: var(--textcolor);
  font-weight: 600;
  letter-spacing: 1px;
  text-decoration: none;
  position: relative;
}

p {
  line-height: 1.5;
  text-indent: 2em;
}

h1,
h2,
h3 {
  position: relative;
  font-family: "Press Start 2P", sans-serif;
  letter-spacing: 2px;
}

button {
  border: none;
  background: none;
  flex: 1;
  position: relative;
}

header {
  display: flex;
  flex-wrap: nowrap;
  justify-content: end;
  width: 100%;
  align-items: end;
  padding-left: 55px;
  padding-right: 55px;
}



.title h1 {
  font-size: xxx-large;
}



.bar {

  display: flex;
  flex: 1 0;
  width: 100%;
  font-size: x-small;
  justify-content: end;
  background-image: url(./images/bar.png);
  background-size: cover;
  background-position: center;
  padding: 40px;
  border: 2px solid var(--accentcolor);
  border-left: 22px solid var(--accentcolor);
  margin-bottom: 60px;
  margin-left: auto;
}

nav {
  display: flex;
  flex: 1 0 500px;
  justify-content: space-between;
  align-items: end;
  width: 100%;
  max-width: 600px;
  height: 100%;
  max-height: 45px;
  right: 45px;
}

nav button {
  margin-left: 15px;
  min-width: 125px;
  cursor: pointer;
  background-color: var(--accentcolor);
  color: rgba(0, 0, 0, 0);
  height: 40px;
  appearance: hidden;
}

nav button span[data-button] {
  font-family: "Press Start 2P", sans-serif;
  appearance: hidden;
}

nav button span[data-button]:before {
  /* element before sits on top of button */
  content: attr(data-button);
  align-items: center;
  justify-content: center;
  display: inline-flex;
  position: absolute;
  bottom: 10px;
  left: 5px;
  width: 100%;
  height: 50%;
  color: var(--textcolor);
  background-color: var(--outline-color);
  opacity: 0.5;
  transition: all 350ms cubic-bezier(0.785, 0.135, 0.15, 0.86);
  z-index: 999;
}

nav button:hover span[data-button]:before {
  /* element before to animate on hover */
  position: absolute;
  content: attr(data-button);
  bottom: 5px;
  left: 5px;
  width: 115%;
  height: 110%;
  color: rgba(0, 0, 0, 0); /* doesn't seem to render without content so i made the content clear so I could leave the text within the tag for accessibility */
  background-color: var(--outline-color);
  opacity: 0.7;
  transition: all 350ms ease-out;
  z-index: 999;
  align-items: end;
}
nav button span[data-button]::after {
  /* element after to create text that moves independently of the rest */
  position: absolute;
  content: attr(data-button);
  align-items: center;
  justify-content: center;
  bottom: 5px;
  left: 5px;
  width: 100%;
  height: 57%;
  color: var(--backgroundcolor);
  transition: all 350ms cubic-bezier(0.785, 0.135, 0.15, 0.86);
  z-index: 999;
}

nav button:hover span[data-button]::after {
  /* element after to create text that moves independently of the rest on hover */
  position: absolute;
  bottom: 0px;
  left: 4px;
  width: 115%;
  height: 100%;
  font-size: larger;
  color: var(--accentcolor);
  transition: all 300ms ease-out;
  z-index: 999;
  align-items: center;
}

main {
  display: flex;
  margin-right: 25px;
  margin-left: auto;
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
  align-content: space-between;
  width: 100%;
  max-width: 900px;
}

section {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  margin-bottom: 25px;
  align-items: start;
}

.section {
  backdrop-filter: blur(16px) grayscale(80%);
  border: 2px solid var(--accentcolor);
  border-left: 16px solid var(--accentcolor);
  flex: 1 1 400px;
  flex-wrap: wrap;
}

section h2 {
  width: max-content;
  position: relative;
  display: flex;
  flex: 0 1 225px;
  font-weight: 700;
}

.about,
.contact .projects {
  padding: 25px;
}

.projectgrid {
  display: flex;
  flex-wrap: wrap-reverse;
  flex: 1 1 75px;
  padding: 4px 4px 4px 0px;
  min-height: 375px;
}

.projects figure {
  position: relative;
  display: flex;
  flex: 0 1 125px;
  background-position: center;
  background-size: cover;
  border: 6px solid var(--backgroundcolor);
  padding: 125px 75px;
  margin: 6px;
  filter: grayscale(30%);
  transition: all 0.4s ease-out;

}

.project:first-of-type {
  /* this one can only get bigger */
  max-width: none;
  flex: 1 0;
}

.project:last-of-type {
  /* this one is allowed to shrink and grow*/
  max-width: none;
  flex: 1 0 ;
}

.project h3 {
  position: absolute;
  font-weight: 600;
  font-size: smaller;
  width: 100%;
  bottom: -110px;
  right: 50px;
  color: var(--accentcolor);
}

.project:hover {
  border: 6px solid var(--accentcolor);
  filter: saturate(130%);
  transition: all 0.3s;
  flex: 1 0; /* this hover says that everything can grow by a factor of 2 when hovered but also shrink if necessary*/

}

.contact {
  font-size: 1.5em;
  line-height: 3;
}

.contact img {
  width: 1.5em;
  height: 1.5em;
  filter: invert(15%) sepia(100%) saturate(3.5) hue-rotate(220deg); /* svg cannot be simply filled with hex here. a bunch of filters is the obvious solution */
}

footer {
  margin-right: 25px;
  margin-left: auto;
  text-align: right;
  font-size: small;
}

[data-outline] {
  visibility: hidden;
  padding-bottom: 5vh;
}

[data-outline]::before {
  /* found out there are SVG filters now. they work on text. this one does two: */
  visibility: visible;
  position: absolute;
  content: attr(data-outline);
  letter-spacing: 2px;
  bottom: 0px;
  left: 0px;
  color: var(--outline-color);
  filter: url(#crisp); /* references the svg filter toward the bottom of the html, i put comments there */
  filter: url(#outline);
  z-index: 999;
  padding: 5px;
}

[data-outline]::after {
  visibility: visible;
  position: absolute;
  content: attr(data-outline);
  letter-spacing: 2px;
  bottom: 0px;
  left: 0px;
  color: var(--accentcolor);
  filter: url(#crisp);
  z-index: 999;
  padding: 5px;
}

#background-video {
  width: 100vw;
  height: 100vh;
  object-fit: cover;
  position: fixed;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  z-index: -3;
}

@media screen and (max-width: 980px) {
  .projects figure {
    filter: none;

    flex: 1 0 250px;
   }

   .projects figure:hover {
    flex: 1 0 250px;
   }


  header {
    display: flex;
    flex-wrap: wrap;
  }
  .title {
    position: relative;
    left: 0px;
    top: -35px;
  }
}
@media screen and (max-width: 750px) {
  .title h2 {
    display: none;
  }

  #background-video {
    display: none;
  }
  
}

@media (prefers-reduced-motion) {
  #background-video {
    display: none;
  }

  span[data-button]:after {
    display: none;
  }


}
